{"version":3,"sources":["src/memoize.js"],"names":[],"mappings":";;AAAA,IAAM,QAAQ,QAAQ,cAAR,CAAR;;AAEN,OAAO,OAAP,GAAiB,UAAC,GAAD,EAAM,SAAN,EAAoC;MAAnB,kEAAY,kBAAO;;AACnD,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAI,gBAAc,YAAY,GAA1B,CADkC;AAEtC,QAAI,gBAAgB,MAAM,GAAN,CAAU,QAAV,CAAhB,CAFkC;;AAItC,QAAI,aAAJ,EAAmB;AACjB,cAAQ,aAAR,EADiB;KAAnB,MAEO;;AAEL,cAAQ,OAAR,CAAgB,WAAhB,EACC,IADD,CACM,UAAC,OAAD,EAAa;AACjB,gBAAQ,MAAM,GAAN,CAAU,QAAV,EAAoB,OAApB,CAAR,EADiB;OAAb,CADN,CAIC,KAJD,CAIO,UAAC,KAAD,EAAW;AAChB,eAAO,KAAP,EADgB;OAAX,CAJP,CAFK;KAFP;GAJiB,CAAnB,CADmD;CAApC","file":"index.js","sourcesContent":["const cache = require('memory-cache')\n\nmodule.exports = (key, generator, keyPrefix = '') => {\n  return new Promise((resolve, reject) => {\n    let cacheKey = `${keyPrefix}${key}`\n    let cacheResponse = cache.get(cacheKey)\n\n    if (cacheResponse) {\n      resolve(cacheResponse)\n    } else {\n\n      Promise.resolve(generator())\n      .then((content) => {\n        resolve(cache.put(cacheKey, content))\n      })\n      .catch((error) => {\n        reject(error)\n      })\n    }\n  })\n}\n"]}